procedure main(argc, argv[])
  if argc = 3 then
    declare overall_start := 0
    declare overall_finish := 0

    declare process_number := MPI_Comm_rank()  // Obtener el identificador del proceso
    declare process_count := MPI_Comm_size()  // Obtener el número total de procesos
    declare process_hostname := MPI_Get_processor_name()  // Obtener el nombre del host

    // Proceso raíz (0) recibe los argumentos y los difunde
    if process_number = 0 then
      overall_start := integer(argv[1])
      overall_finish := integer(argv[2])
    end if

    // Difundir los valores de overall_start y overall_finish a todos los procesos
    MPI_Bcast(overall_start, root=0)
    MPI_Bcast(overall_finish, root=0)

    // Calcular el rango asignado al proceso
    declare process_start := calculate_start(process_number, overall_finish, process_count, overall_start)
    declare process_finish := calculate_finish(process_number, overall_finish, process_count, overall_start)
    declare process_size := process_finish - process_start

    // Imprimir información del rango del proceso
    // E.g: hostname2:1: range [12, 20[ size 8
    print process_hostname, ':', process_number, ": range [", process_start, ", ", process_finish, "[ size ", process_size

    // Calcular tiempo inicial
    declare start_time := MPI_Wtime()

    // Paralelismo con OpenMP
    parallel for thread_number := 0 to omp_get_num_threads() - 1
      // Calcular el rango para cada hilo
      declare thread_start := process_start + calculate_start(thread_number, process_finish - process_start, omp_get_num_threads(), 0)
      declare thread_finish := process_start + calculate_finish(thread_number, process_finish - process_start, omp_get_num_threads(), 0)
      declare thread_size := thread_finish - thread_start

      // Imprimir información del rango del hilo
      // E.g: hostname2:1.1: range [15, 18[ size 3
      print '\t', process_hostname, ':', process_number, '.', thread_number, ": range [", thread_start, ", ", thread_finish, "[ size ", thread_size
    end parallel

    // Calcular tiempo final
    declare end_time := MPI_Wtime()
    declare elapsed_time := end_time - start_time

    // Imprimir tiempo total del proceso
    print process_hostname, ':', process_number, ": execution time ", elapsed_time, "s"
  else
    print "usage: hybrid_distr_bcast start finish"
  end if
end procedure

function calculate_start(rank, end, workers, begin)
  return rank * ((end - begin) / workers) + min(rank, (end - begin) % workers)
end function

function calculate_finish(rank, end, workers, begin)
  return calculate_start(rank + 1, end, workers, begin)
end function
